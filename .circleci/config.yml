version: 2.1

parameters:
  ssh-fingerprint:
    type: string
    default: ${GITHUB_SSH_FINGERPRINT}

aliases:
  # Workflow filters
  - &filter-not-release-or-master
    tags:
      ignore: /^v[0-9]+(\.[0-9]+){2}(-.+|[^-.]*)$/
    branches:
      ignore:
        - master
        - /^release-[0-9]+(\.[0-9]+){2}(-.+|[^-.]*)$/
  - &filter-only-master
    branches:
      only: master
  - &filter-only-release
    branches:
      only: /^v[1-9]*[0-9]+\.[1-9]*[0-9]+\.x$/

workflows:
  version: 2
  build-master:
    jobs:
      - build-frontend:
          filters: *filter-only-master
      - build-backend:
          requires:
            - build-frontend
          filters: *filter-only-master
      - codespell:
          filters: *filter-only-master
      - lint-backend:
          filters: *filter-only-master
      - test:
          filters: *filter-only-master

  build-branches-and-prs:
    jobs:
      - build-frontend:
          filters: *filter-not-release-or-master
      - build-backend:
          requires:
            - build-frontend
          filters: *filter-not-release-or-master
      - codespell:
          filters: *filter-not-release-or-master
      - lint-backend:
          filters: *filter-not-release-or-master
      - test:
          filters: *filter-not-release-or-master

  make-release:
    jobs:
      - build-frontend:
          filters: *filter-only-release
      - build-backend:
          filters: *filter-only-release
      - codespell:
          filters: *filter-only-release
      - lint-backend:
          filters: *filter-only-release
      - test:
          filters: *filter-only-release
      - package-plugin:
          requires:
            - build-frontend
            - build-backend
            - codespell
            - lint-backend
            - test
          filters: *filter-only-release
      - approve_release:
          type: approval
          requires:
            - package-plugin
          filters: *filter-only-release
      - publish_github_release:
          requires:
          - approve_release
          filters: *filter-only-release
      - publish_gcs_release:
          requires:
            - approve_release
          filters: *filter-only-release
      - approve_publish_to_gcom:
          type: approval
          requires:
          - publish_github_release
          - publish_gcs_release
          filters: *filter-only-release
      - publish_to_gcom:
          requires:
          - approve_publish_to_gcom
          filters: *filter-only-release

executors:
  default_exec:
    docker:
      - image: srclosson/grafana-plugin-ci-alpine:latest
  e2e_exec:
    docker:
      - image: srclosson/grafana-plugin-ci-e2e:latest
  cloud_sdk_exec:
    docker:
      - image: google/cloud-sdk
  grafana_publisher:
    docker:
      - image: briangann/integration-grafana-publisher:latest

jobs:
  get-plugin:
    working_directory: ~/grafana-strava-datasource
    docker:
      - image: circleci/golang:1.13.7
    environment:
      GOPATH: /go
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "yarn.lock" }}
      - run:
          name: yarn install
          command: 'yarn install --pure-lockfile --no-progress'
          no_output_timeout: 15m
      - save_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}
          paths:
            - ./node_modules
      - restore_cache:
          keys:
            - go-vendor-cache-{{ checksum "go.sum" }}
      - run:
          name: install backend
          command: 'make install-backend'
          no_output_timeout: 5m
      - save_cache:
          key: go-vendor-cache-{{ checksum "go.sum" }}
          paths:
            - ./vendor
      - persist_to_workspace:
          root: .
          paths:
            - ./*

  build-frontend:
    working_directory: ~/grafana-strava-datasource
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "yarn.lock" }}
      - run:
          name: yarn install
          command: 'yarn install --pure-lockfile --no-progress'
          no_output_timeout: 15m
      - save_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}
          paths:
            - ./node_modules
      - run: make build-frontend

  build-backend:
    working_directory: ~/grafana-strava-datasource
    docker:
      - image: circleci/golang:1.13.7
    environment:
      GOPATH: /go
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-vendor-cache-{{ checksum "go.sum" }}
      - run:
          name: install backend
          command: 'make install-backend'
          no_output_timeout: 5m
      - save_cache:
          key: go-vendor-cache-{{ checksum "go.sum" }}
          paths:
            - ./vendor
      - run: make build-backend

  lint-backend:
    working_directory: ~/grafana-strava-datasource
    docker:
      - image: circleci/golang:1.13.7
    environment:
      GOPATH: /go
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-vendor-cache-{{ checksum "go.sum" }}
      - run:
          name: install backend
          command: 'make install-backend'
          no_output_timeout: 5m
      - save_cache:
          key: go-vendor-cache-{{ checksum "go.sum" }}
          paths:
            - ./vendor
      - run: make lint-backend

  test:
    working_directory: ~/grafana-strava-datasource
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: yarn install
          command: 'yarn install --pure-lockfile --no-progress'
          no_output_timeout: 15m
      - save_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}
          paths:
            - ./node_modules
      - run:
          name: Test
          command: yarn test
      - store_artifacts:
          path: coverage

  codespell:
    docker:
      - image: circleci/python
    steps:
      - checkout
      - run: sudo pip install codespell
      - run: codespell -S './.git*,./src/img*','./yarn.lock' -L que --ignore-words=./.codespell_ignore

  package-plugin:
    executor: e2e_exec
    working_directory: ~/grafana-strava-datasource
    steps:
      - checkout
      - run:
          name: install backend
          command: 'make install-backend'
          no_output_timeout: 5m
      - run:
          name: yarn install
          command: 'yarn install --pure-lockfile --no-progress'
          no_output_timeout: 15m
      - run:
          name: Build plugin for all platforms
          command: 'make dist'
          no_output_timeout: 15m
      - run:
          name: Prepare plugin for packaging
          command: |
            mkdir -p ci/jobs/build_plugin
            mv dist/ ci/jobs/build_plugin
            cp CHANGELOG.md ci/jobs/build_plugin/dist
      - run:
          name: Package and sign plugin
          command: yarn grafana-toolkit plugin:ci-package
          no_output_timeout: 15m
      - run:
          name: Copy package
          command: |
            mkdir -p tmp/packages/any
            cp ci/packages/info.json ci/packages/info-any.json
            mv ci/packages/* tmp/packages/any
            mv tmp/packages/any ci/packages
      - persist_to_workspace:
          root: .
          paths:
            - ci/dist
            - ci/jobs/package
            - ci/jobs/build_backend/dist
            - ci/grafana-test-env
            - ci/packages
      - store_artifacts:
          path: ci/packages

  publish_github_release:
    working_directory: ~/es-open-distro-datasource
    docker:
      - image: cibuilds/github:0.13.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - << pipeline.parameters.ssh-fingerprint >>
      - attach_workspace:
          at: .
      - restore_cache:
          name: restore node_modules
          keys:
            - build-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - run:
          name: "Publish Release on GitHub"
          command: |
            # copy ci artifacts
            mkdir -p artifacts
            if [ -d ci/packages/linux ]; then
              cp ci/packages/linux/* artifacts
            fi
            if [ -d ci/packages/windows ]; then
              cp ci/packages/windows/* artifacts
            fi
            if [ -d ci/packages/darwin ]; then
              cp ci/packages/darwin/* artifacts
            fi
            if [ -d ci/packages/any ]; then
              cp ci/packages/any/* artifacts
            fi
            apk add --update --no-cache jq git-lfs
            PLUGIN_NAME=`cat ci/dist/plugin.json|jq '.id'| sed s/\"//g`
            echo "Plugin Name: ${PLUGIN_NAME}"
            VERSION=`cat ci/dist/plugin.json|jq '.info.version'| sed s/\"//g`
            echo "Plugin Version: ${VERSION}"
            RELEASE_NOTES=`awk 'BEGIN {FS="##"; RS=""} FNR==4 {print; exit}' CHANGELOG.md`
            git config user.email "eng@grafana.com"
            git config user.name "CircleCI Automation"
            git checkout -b release-${VERSION}
            # add dist, it is needed to get the right plugin.json info during gcom publish
            mkdir -p dist
            cp -rp ci/dist/${PLUGIN_NAME}/* dist/
            git add --force dist/
            git commit -m "automated release $VERSION [skip ci]"
            git push -f origin release-${VERSION}
            git tag -f v${VERSION}
            git push -f origin v${VERSION}
            ghr \
              -t ${GITHUB_TOKEN} \
              -u ${CIRCLE_PROJECT_USERNAME} \
              -r ${CIRCLE_PROJECT_REPONAME} \
              -c ${CIRCLE_SHA1} \
              -n "${PLUGIN_NAME} v${VERSION}" \
              -b "${RELEASE_NOTES}" \
              -delete \
              v${VERSION} \
              ./artifacts/

  publish_gcs_release:
    executor: cloud_sdk_exec
    working_directory: ~/grafana-strava-datasource
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: ls -lha
      - run:
          name: 'Copy Artifacts to GCP Release Bucket'
          command: |
            apt update
            apt install -y jq git-lfs
            ls -l ci/dist/plugin.json
            echo "Contents of ci/jobs/build_frontend/dist/plugin.json"
            cat ci/dist/plugin.json
            ls -lR ci/packages
            PLUGIN_NAME=`cat ci/dist/plugin.json|jq '.id'| sed s/\"//g`
            echo "Plugin Name: ${PLUGIN_NAME}"
            VERSION=`cat ci/dist/plugin.json|jq '.info.version'| sed s/\"//g`
            echo "Plugin Version: ${VERSION}"
            # copy
            if [ -z "${GCLOUD_SERVICE_KEY}" ]; then
              echo "Missing GCS Publish Key"
              exit -1
            fi
            echo ${GCLOUD_SERVICE_KEY} | gcloud auth activate-service-account --key-file=-
            echo "Contents of artifacts"
            echo "Copying artifacts to ${PLUGIN_NAME}/${VERSION}/${CIRCLE_BRANCH}/${CIRCLE_SHA1}"
            if [ -d ci/packages/linux ]; then
              gsutil -m cp -r ci/packages/linux/** gs://integration-artifacts/${PLUGIN_NAME}/release/${VERSION}/linux
            fi
            if [ -d ci/packages/windows ]; then
              gsutil -m cp -r ci/packages/windows/** gs://integration-artifacts/${PLUGIN_NAME}/release/${VERSION}/windows
            fi
            if [ -d ci/packages/darwin ]; then
              gsutil -m cp -r ci/packages/darwin/** gs://integration-artifacts/${PLUGIN_NAME}/release/${VERSION}/darwin
            fi
            if [ -d ci/packages/any ]; then
              gsutil -m cp -r ci/packages/any/** gs://integration-artifacts/${PLUGIN_NAME}/release/${VERSION}/any
            fi

  publish_to_gcom:
    executor: grafana_publisher
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: "Publish to GCOM"
          command: |
            if [ -z "${GCOM_PUBLISH_TOKEN}" ]; then
              echo "Missing GCOM Publish Key"
              exit -1
            fi
            if [ -z "${GITHUB_TOKEN}" ]; then
              echo "Missing GITHUB_TOKEN"
              exit -1
            fi
            if [ -z "${GCLOUD_SERVICE_KEY}" ]; then
              echo "Missing GCLOUD_SERVICE_KEY"
              exit -1
            fi
            PLUGIN_NAME=`cat ci/dist/plugin.json|jq '.id'| sed s/\"//g`
            PLUGIN_VERSION=`cat ci/dist/plugin.json|jq '.info.version'| sed s/\"//g`
            echo ${GCLOUD_SERVICE_KEY} | gcloud auth activate-service-account --key-file=-
            echo "Publishing to GCOM: $PLUGIN_NAME $PLUGIN_VERSION"
            /root/app/bin/grafana-publisher.js --auto publishremote $PLUGIN_NAME $PLUGIN_VERSION
